// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: arbitrage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArbitrageService_SendCurrencyPrice_FullMethodName = "/arbitrage.ArbitrageService/SendCurrencyPrice"
)

// ArbitrageServiceClient is the client API for ArbitrageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArbitrageServiceClient interface {
	// Sends currency pricing data to the arbitrage service
	SendCurrencyPrice(ctx context.Context, in *CurrencyPrice, opts ...grpc.CallOption) (*Acknowledge, error)
}

type arbitrageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArbitrageServiceClient(cc grpc.ClientConnInterface) ArbitrageServiceClient {
	return &arbitrageServiceClient{cc}
}

func (c *arbitrageServiceClient) SendCurrencyPrice(ctx context.Context, in *CurrencyPrice, opts ...grpc.CallOption) (*Acknowledge, error) {
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, ArbitrageService_SendCurrencyPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArbitrageServiceServer is the server API for ArbitrageService service.
// All implementations must embed UnimplementedArbitrageServiceServer
// for forward compatibility
type ArbitrageServiceServer interface {
	// Sends currency pricing data to the arbitrage service
	SendCurrencyPrice(context.Context, *CurrencyPrice) (*Acknowledge, error)
	mustEmbedUnimplementedArbitrageServiceServer()
}

// UnimplementedArbitrageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArbitrageServiceServer struct {
}

func (UnimplementedArbitrageServiceServer) SendCurrencyPrice(context.Context, *CurrencyPrice) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCurrencyPrice not implemented")
}
func (UnimplementedArbitrageServiceServer) mustEmbedUnimplementedArbitrageServiceServer() {}

// UnsafeArbitrageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArbitrageServiceServer will
// result in compilation errors.
type UnsafeArbitrageServiceServer interface {
	mustEmbedUnimplementedArbitrageServiceServer()
}

func RegisterArbitrageServiceServer(s grpc.ServiceRegistrar, srv ArbitrageServiceServer) {
	s.RegisterService(&ArbitrageService_ServiceDesc, srv)
}

func _ArbitrageService_SendCurrencyPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).SendCurrencyPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArbitrageService_SendCurrencyPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).SendCurrencyPrice(ctx, req.(*CurrencyPrice))
	}
	return interceptor(ctx, in, info, handler)
}

// ArbitrageService_ServiceDesc is the grpc.ServiceDesc for ArbitrageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArbitrageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arbitrage.ArbitrageService",
	HandlerType: (*ArbitrageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCurrencyPrice",
			Handler:    _ArbitrageService_SendCurrencyPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arbitrage.proto",
}
